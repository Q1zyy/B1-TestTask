// <auto-generated />
using System;
using B1_2.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace B1_2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("B1_2.Entities.AccountClassEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AccountClasses");
                });

            modelBuilder.Entity("B1_2.Entities.AccountEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountClassEntityId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ClosingCredit")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ClosingDebit")
                        .HasColumnType("numeric");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("OpeningCredit")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OpeningDebit")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TurnoverCredit")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TurnoverDebit")
                        .HasColumnType("numeric");

                    b.Property<int>("UploadedFileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountClassEntityId");

                    b.HasIndex("UploadedFileId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("B1_2.Entities.BankEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("B1_2.Entities.UploadedFileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BankId")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("UploadedFiles");
                });

            modelBuilder.Entity("B1_2.Entities.AccountEntity", b =>
                {
                    b.HasOne("B1_2.Entities.AccountClassEntity", "AccountClass")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountClassEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B1_2.Entities.UploadedFileEntity", "UploadedFile")
                        .WithMany("Accounts")
                        .HasForeignKey("UploadedFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountClass");

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("B1_2.Entities.UploadedFileEntity", b =>
                {
                    b.HasOne("B1_2.Entities.BankEntity", "Bank")
                        .WithMany("Files")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("B1_2.Entities.AccountClassEntity", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("B1_2.Entities.BankEntity", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("B1_2.Entities.UploadedFileEntity", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
